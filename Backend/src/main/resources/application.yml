# default 프로필
spring:
  config:
    activate:
      on-profile: default
  application:
    name: Bookiki
  autoconfigure:
    exclude:
      - io.awspring.cloud.autoconfigure.core.AwsAutoConfiguration
      - io.awspring.cloud.autoconfigure.s3.S3AutoConfiguration

  file:
    upload:
      path: ${FILE_STORAGE_PATH}
    storage:
      path: ${FILE_STORAGE_PATH}
      default-image: ${FILE_STORAGE_PATH}/default-profile.png

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          time_zone: Asia/Seoul
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://localhost:8088/api/login/oauth2/code/google
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8088/api/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
jwt:
  secret: ${JWT_SECRET}
  issuer: bookiki-auth
  subject-prefix: bookiki
  accessTokenExpiration: ${JWT_ACCESS_TOKEN_EXPIRATION}
  refreshTokenExpiration: ${JWT_REFRESH_TOKEN_EXPIRATION}
  temporaryTokenExpiration: ${JWT_TEMPORARY_TOKEN_EXPIRATION}

cookie:
  secure-flag: false

server:
  port: ${SERVER_PORT:8088}
  servlet:
    encoding:
      charset: UTF-8
      force: true
    context-path: ""

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    org.springframework.web: ${LOG_LEVEL_SPRING_WEB:DEBUG}
    org.hibernate.SQL: ${LOG_LEVEL_HIBERNATE:DEBUG}
    com.corp: ${LOG_LEVEL_APP:DEBUG}
    org.mybatis: ${LOG_LEVEL_MYBATIS:TRACE}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

aws:
  s3:
    bucket: ${AWS_BUCKET_NAME}
    region: ${AWS_REGION}
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}

mybatis:
  mapper-locations: classpath:mapper/**/*.xml
  type-aliases-package: ${MYBATIS_TYPE_ALIASES_PACKAGE}
  configuration:
    map-underscore-to-camel-case: true
    default-fetch-size: 100
    default-statement-timeout: 30
    jdbc-type-for-null: NULL

springdoc:
  api-docs:
    path: /api/api-docs
  swagger-ui:
    path: /api/swagger-ui.html
    operations-sorter: method

cache:
  type: redis
  redis:
    time-to-live: ${REDIS_TTL:3600000}

websocket:
  endpoint: /ws
  allowed-origins: ${CORS_ALLOWED_ORIGINS:"*"}

naver:
  api:
    books-client-id: ${BOOKS_NAVER_CLIENT_ID}
    books-client-secret: ${BOOKS_NAVER_CLIENT_SECRET}

dialogflow:
  project-id: ${DIALOGFLOW_PROJECT_ID}
  client-email: ${DIALOGFLOW_CLIENT_EMAIL}
  private-key: ${DIALOGFLOW_PRIVATE_KEY}
  language-code: ko-KR
  webhook:
    enabled: true
    secret: ${WEBHOOK_SECRET}  # Webhook 검증용 시크릿

chatbot:
  context:
    lifetime-minutes: 30
  confidence:
    threshold: 0.7

---
# test 프로필
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;MODE=MySQL
    username: sa
    password:
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect
logging:
  level:
    com.corp.bookiki: DEBUG
    org.hibernate.SQL: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.springframework.test: DEBUG
    org.springframework.transaction: DEBUG